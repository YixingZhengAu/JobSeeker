AWSTemplateFormatVersion: '2010-09-09'
Description: 'Application Load Balancer infrastructure for Job Seeker application'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name
  
  VPCStackName:
    Type: String
    Description: Name of the VPC stack
  
  ECSStackName:
    Type: String
    Description: Name of the ECS stack
  
  DomainName:
    Type: String
    Default: ''
    Description: Domain name for the application (optional)

Resources:
  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Environment}-job-seeker-alb"
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      SecurityGroups:
        - Fn::ImportValue: !Sub "${VPCStackName}-ALBSecurityGroupId"
      Subnets:
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet1Id"
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet2Id"
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-job-seeker-alb"
        - Key: Environment
          Value: !Ref Environment

  # Target Groups
  ServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Environment}-server-target-group"
      Port: 8000
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-server-target-group"
        - Key: Environment
          Value: !Ref Environment

  ClientTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Environment}-client-target-group"
      Port: 8501
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      HealthCheckProtocol: HTTP
      HealthCheckPath: /_stcore/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-client-target-group"
        - Key: Environment
          Value: !Ref Environment

  # Listeners
  ServerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ServerTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ClientListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ClientTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 8501
      Protocol: HTTP

  # Listener Rules
  ServerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ServerTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /api/*
            - /recommend
            - /health
      ListenerArn: !Ref ServerListener
      Priority: 1

  ClientListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ClientTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref ServerListener
      Priority: 2

  # ECS Service Discovery
  ServerServiceDiscovery:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub "${Environment}-job-seeker.local"
      Vpc:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      Description: Service discovery namespace for Job Seeker application

  ServerServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: server
      NamespaceId: !Ref ServerServiceDiscovery
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 10
      HealthCheckCustomConfig:
        FailureThreshold: 1

  # ECS Service Registration
  ServerServiceRegistration:
    Type: AWS::ServiceDiscovery::Instance
    Properties:
      InstanceId: !Sub "${Environment}-server"
      ServiceId: !Ref ServerServiceDiscoveryService
      InstanceAttributes:
        AWS_INSTANCE_IPV4: !GetAtt ServerTargetGroup.TargetGroupArn
        AWS_INSTANCE_PORT: "8000"

  # CloudWatch Alarms
  ServerTargetGroupAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-server-target-group-health"
      AlarmDescription: Alarm when server target group is unhealthy
      MetricName: HealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt ServerTargetGroup.TargetGroupArn
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName

  ClientTargetGroupAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-client-target-group-health"
      AlarmDescription: Alarm when client target group is unhealthy
      MetricName: HealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt ClientTargetGroup.TargetGroupArn
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerDNS"

  ServerLoadBalancerDNS:
    Description: DNS name for server access
    Value: !Sub "${ApplicationLoadBalancer.DNSName}:80"
    Export:
      Name: !Sub "${AWS::StackName}-ServerLoadBalancerDNS"

  ClientLoadBalancerDNS:
    Description: DNS name for client access
    Value: !Sub "${ApplicationLoadBalancer.DNSName}:8501"
    Export:
      Name: !Sub "${AWS::StackName}-ClientLoadBalancerDNS"

  ServerTargetGroupArn:
    Description: Server Target Group ARN
    Value: !Ref ServerTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-ServerTargetGroupArn"

  ClientTargetGroupArn:
    Description: Client Target Group ARN
    Value: !Ref ClientTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-ClientTargetGroupArn"

  LoadBalancerArn:
    Description: Load Balancer ARN
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerArn"
