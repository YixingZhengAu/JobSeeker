AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS infrastructure for Job Seeker application'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name
  
  VPCStackName:
    Type: String
    Description: Name of the VPC stack
  
  # Server Configuration
  ServerCpu:
    Type: Number
    Default: 256
    AllowedValues: [256, 512, 1024, 2048]
    Description: CPU units for server container
  
  ServerMemory:
    Type: Number
    Default: 512
    AllowedValues: [512, 1024, 2048, 4096]
    Description: Memory (MiB) for server container
  
  ServerDesiredCount:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Desired number of server tasks
  
  # Client Configuration
  ClientCpu:
    Type: Number
    Default: 256
    AllowedValues: [256, 512, 1024, 2048]
    Description: CPU units for client container
  
  ClientMemory:
    Type: Number
    Default: 512
    AllowedValues: [512, 1024, 2048, 4096]
    Description: Memory (MiB) for client container
  
  ClientDesiredCount:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Desired number of client tasks
  
  # Auto Scaling Configuration
  ServerMinCapacity:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Minimum number of server tasks
  
  ServerMaxCapacity:
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 10
    Description: Maximum number of server tasks
  
  ClientMinCapacity:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Minimum number of client tasks
  
  ClientMaxCapacity:
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 10
    Description: Maximum number of client tasks
  
  # Environment Variables
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key
  
  OpenAIChatModel:
    Type: String
    Default: gpt-4o-mini
    Description: OpenAI Chat Model Name
  
  OpenAIEmbeddingModel:
    Type: String
    Default: text-embedding-3-small
    Description: OpenAI Embedding Model Name

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Environment}-job-seeker-cluster"
      CapacityProviders:
        - !Ref ECSCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref ECSCapacityProvider
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-job-seeker-cluster"
        - Key: Environment
          Value: !Ref Environment

  # Auto Scaling Group for ECS
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${Environment}-job-seeker-asg"
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet1Id"
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet2Id"
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref ServerTargetGroup
        - !Ref ClientTargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-job-seeker-ecs-instance"
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true

  # Launch Template for ECS instances
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${Environment}-job-seeker-lt"
      LaunchTemplateData:
        ImageId: ami-0c7217cdde317cfec  # Amazon ECS-Optimized AMI (us-east-1)
        InstanceType: t3.medium
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${VPCStackName}-ECSSecurityGroupId"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y ecs-init
            systemctl enable --now ecs
            echo "ECS_CLUSTER=${Environment}-job-seeker-cluster" >> /etc/ecs/ecs.config
            echo "ECS_ENABLE_TASK_ENI=true" >> /etc/ecs/ecs.config
            systemctl restart ecs
        IamInstanceProfile:
          Name: !Ref ECSInstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              DeleteOnTermination: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${Environment}-job-seeker-ecs-instance"
              - Key: Environment
                Value: !Ref Environment

  # ECS Capacity Provider
  ECSCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: !Sub "${Environment}-job-seeker-cp"
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          MaximumScalingStepSize: 1
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: ENABLED

  # IAM Role for ECS instances
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ecs-instance-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: !Sub "${Environment}-ecs-instance-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:UpdateContainerInstancesState
                  - ecs:Submit*
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # IAM Instance Profile
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${Environment}-ecs-instance-profile"
      Roles:
        - !Ref ECSInstanceRole

  # CloudWatch Log Groups
  ServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${Environment}-job-seeker-server"
      RetentionInDays: 30

  ClientLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${Environment}-job-seeker-client"
      RetentionInDays: 30

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ecs-task-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub "${Environment}-ecs-task-execution-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # ECS Task Role
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ecs-task-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${Environment}-ecs-task-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Server Task Definition
  ServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${Environment}-job-seeker-server"
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      Cpu: !Ref ServerCpu
      Memory: !Ref ServerMemory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: server
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/job-seeker-server:latest"
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: OPENAI_API_KEY
              Value: !Ref OpenAIApiKey
            - Name: OPENAI_CHAT_MODEL
              Value: !Ref OpenAIChatModel
            - Name: OPENAI_EMBEDDING_MODEL
              Value: !Ref OpenAIEmbeddingModel
            - Name: PORT
              Value: "8000"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ServerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # Client Task Definition
  ClientTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${Environment}-job-seeker-client"
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      Cpu: !Ref ClientCpu
      Memory: !Ref ClientMemory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: client
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/job-seeker-client:latest"
          PortMappings:
            - ContainerPort: 8501
              Protocol: tcp
          Environment:
            - Name: API_BASE_URL
              Value: !Sub "http://${ServerLoadBalancerDNS}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ClientLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8501/_stcore/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # Server Service
  ServerService:
    Type: AWS::ECS::Service
    DependsOn: ServerTaskDefinition
    Properties:
      ServiceName: !Sub "${Environment}-job-seeker-server"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ServerTaskDefinition
      DesiredCount: !Ref ServerDesiredCount
      LoadBalancers:
        - ContainerName: server
          ContainerPort: 8000
          TargetGroupArn: !Ref ServerTargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      HealthCheckGracePeriodSeconds: 60

  # Client Service
  ClientService:
    Type: AWS::ECS::Service
    DependsOn: ClientTaskDefinition
    Properties:
      ServiceName: !Sub "${Environment}-job-seeker-client"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ClientTaskDefinition
      DesiredCount: !Ref ClientDesiredCount
      LoadBalancers:
        - ContainerName: client
          ContainerPort: 8501
          TargetGroupArn: !Ref ClientTargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      HealthCheckGracePeriodSeconds: 60

  # Auto Scaling for Server
  ServerScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref ServerMaxCapacity
      MinCapacity: !Ref ServerMinCapacity
      ResourceId: !Sub "service/${ECSCluster.Name}/${ServerService.Name}"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServerCPUScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${Environment}-server-cpu-scaling"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServerScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  # Auto Scaling for Client
  ClientScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref ClientMaxCapacity
      MinCapacity: !Ref ClientMinCapacity
      ResourceId: !Sub "service/${ECSCluster.Name}/${ClientService.Name}"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ClientCPUScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${Environment}-client-cpu-scaling"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ClientScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ECSClusterName"

  ServerServiceName:
    Description: Server Service Name
    Value: !Ref ServerService
    Export:
      Name: !Sub "${AWS::StackName}-ServerServiceName"

  ClientServiceName:
    Description: Client Service Name
    Value: !Ref ClientService
    Export:
      Name: !Sub "${AWS::StackName}-ClientServiceName"

  ServerTaskDefinitionArn:
    Description: Server Task Definition ARN
    Value: !Ref ServerTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-ServerTaskDefinitionArn"

  ClientTaskDefinitionArn:
    Description: Client Task Definition ARN
    Value: !Ref ClientTaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-ClientTaskDefinitionArn"
